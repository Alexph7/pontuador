import os
import re
import sys
import asyncpg
import logging
from time import perf_counter
from asyncpg import UniqueViolationError, PostgresError, CannotConnectNowError, ConnectionDoesNotExistError
import asyncio
import csv
import io
import math
from telegram import InlineKeyboardButton, InlineKeyboardMarkup, InputFile
from telegram.ext import CallbackQueryHandler
from telegram.ext import ApplicationHandlerStop
from telegram import Update, Bot
from dotenv import load_dotenv
from telegram.ext import ApplicationBuilder, ContextTypes
from telegram import BotCommand, BotCommandScopeDefault, BotCommandScopeAllPrivateChats
from telegram.ext import (
    CommandHandler, CallbackContext,
    MessageHandler, filters, ConversationHandler
)


pool: asyncpg.Pool | None = None
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

load_dotenv()

# --- Configura√ß√£o e constantes ---
BOT_TOKEN = os.getenv('TELEGRAM_TOKEN')
if not BOT_TOKEN:
    logger.error("TELEGRAM_TOKEN n√£o encontrado.")
    sys.exit(1)

DATABASE_URL = os.getenv('DATABASE_URL')
ID_ADMIN = int(os.getenv('ID_ADMIN'))
LIMIAR_PONTUADOR = 500
NIVEIS_BRINDES = {1000: 'Brinde N√≠vel 1', 2000: 'Brinde N√≠vel 2'}
ADMIN_PASSWORD = os.getenv("ADMIN_PASSWORD")

ADMIN_IDS = os.getenv("ADMIN_IDS", "")
if ADMIN_IDS:
    try:
        ADMINS = [int(x.strip()) for x in ADMIN_IDS.split(',') if x.strip()]
    except ValueError:
        logger.error("ADMIN_IDS deve conter apenas n√∫meros separados por v√≠rgula.")
        ADMINS = []
else:
    ADMINS = []

# --- Estados de conversa ---
ADMIN_SENHA, ESPERANDO_SUPORTE, ADD_PONTOS_POR_ID, ADD_PONTOS_QTD, ADD_PONTOS_MOTIVO, \
DEL_PONTOS_ID, DEL_PONTOS_QTD, DEL_PONTOS_MOTIVO, REMOVER_PONTUADOR_ID, BLOQUEAR_ID, \
DESBLOQUEAR_ID, ADD_PALAVRA_PROIBIDA, DEL_PALAVRA_PROIBIDA = range(13)

TEMPO_LIMITE_BUSCA = 5          # Tempo m√°ximo (em segundos) para consulta
PAGE_SIZE = 20             # N√∫mero de usu√°rios por p√°gina


async def init_db_pool():
    global pool
    pool = await asyncpg.create_pool(dsn=DATABASE_URL,min_size=1,max_size=10)
    async with pool.acquire() as conn:
        # Cria√ß√£o de tabelas se n√£o existirem
        await conn.execute("""
        CREATE TABLE IF NOT EXISTS usuarios (
            user_id BIGINT PRIMARY KEY,
            username TEXT,
            first_name TEXT,
            pontos INTEGER NOT NULL DEFAULT 0,
            nivel_atingido INTEGER NOT NULL DEFAULT 0,
            is_pontuador BOOLEAN NOT NULL DEFAULT FALSE,
            visto BOOLEAN NOT NULL DEFAULT FALSE
        );
        CREATE TABLE IF NOT EXISTS historico_pontos (
            id SERIAL PRIMARY KEY,
            user_id BIGINT REFERENCES usuarios(user_id),
            pontos INTEGER NOT NULL,
            motivo TEXT,
            data TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        );
        CREATE TABLE IF NOT EXISTS usuarios_bloqueados (
            user_id BIGINT PRIMARY KEY,
            motivo TEXT,
            data TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        );
        CREATE TABLE IF NOT EXISTS eventos (
            id SERIAL PRIMARY KEY,
            nome TEXT,
            inicio TIMESTAMP,
            fim TIMESTAMP,
            multiplicador INTEGER DEFAULT 1
        );
        CREATE TABLE IF NOT EXISTS palavras_proibidas (
            id SERIAL PRIMARY KEY,
            palavra TEXT UNIQUE NOT NULL
        );
        """)

# --- Helpers de usu√°rio (asyncpg) ---
async def adicionar_usuario_db(pool, user_id: int, username: str, first_name: str):
    async with pool.acquire() as conn:
        async with conn.transaction():
            # 1) tenta buscar registro antigo
            old = await conn.fetchrow(
                "SELECT username, first_name FROM usuarios WHERE user_id = $1",
                user_id
            )

            if old:
                # 2) upsert via UPDATE
                await conn.execute(
                    """
                    UPDATE usuarios
                       SET username   = $1,
                           first_name = $2
                     WHERE user_id = $3
                    """,
                    username, first_name, user_id
                )

                # 3) grava hist√≥rico de cada mudan√ßa
                if old['username'] != username:
                    await conn.execute(
                        """
                        INSERT INTO usuario_history
                          (user_id, campo, valor_antigo, valor_novo, criado_em)
                        VALUES ($1, 'username', $2, $3, now())
                        """,
                        user_id, old['username'], username
                    )
                if old['first_name'] != first_name:
                    await conn.execute(
                        """
                        INSERT INTO usuario_history
                          (user_id, campo, valor_antigo, valor_novo, criado_em)
                        VALUES ($1, 'first_name', $2, $3, now())
                        """,
                        user_id, old['first_name'], first_name
                    )

            else:
                # 4) registro novo
                await conn.execute(
                    """
                    INSERT INTO usuarios(user_id, username, first_name)
                    VALUES($1, $2, $3)
                    """,
                    user_id, username, first_name
                )
                # (opcional) hist√≥rico de novo usu√°rio
                await conn.execute(
                    """
                    INSERT INTO usuario_history
                      (user_id, campo, valor_antigo, valor_novo, criado_em)
                    VALUES ($1, 'INSERT', NULL, $2, now())
                    """,
                    user_id, username
                )


async def obter_usuario_db(user_id: int) -> asyncpg.Record | None:
    """
    Retorna um registro de usu√°rio como asyncpg.Record ou None.
    """
    return await pool.fetchrow(
        "SELECT * FROM usuarios WHERE user_id = $1",
        user_id
    )

async def registrar_historico_db(user_id: int, pontos: int, motivo: str | None = None):
    """
    Insere um registro de pontos no hist√≥rico.
    """
    await pool.execute(
        """
        INSERT INTO historico_pontos (user_id, pontos, motivo)
        VALUES ($1, $2, $3)
        """,
        user_id, pontos, motivo
    )

async def total_usuarios(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    /total_usuarios
    Retorna o n√∫mero total de usu√°rios cadastrados na tabela 'usuarios'.
    Somente admins podem executar.
    """
    # 1) Verifica permiss√£o
    requester_id = update.effective_user.id
    if requester_id not in ADMINS:
        await update.message.reply_text("‚ùå Voc√™ n√£o tem permiss√£o para isso.")
        return

    # 2) Consulta ao banco com timeout
    try:
        total = await asyncio.wait_for(
            pool.fetchval("SELECT COUNT(*) FROM usuarios"),
            timeout=TEMPO_LIMITE_BUSCA
        )
    except asyncio.TimeoutError:
        await update.message.reply_text(
            "‚ùå A consulta demorou demais. Tente novamente mais tarde."
        )
        return
    except Exception as e:
        logger.error("Erro ao contar usu√°rios: %s", e)
        await update.message.reply_text(
            "‚ùå Erro ao acessar o banco. Tente novamente mais tarde."
        )
        return

    # 3) Envia resultado
    await update.message.reply_text(f"üë• Total de usu√°rios cadastrados: {total}")


async def atualizar_pontos(
    user_id: int,
    delta: int,
    motivo: str = None,
    bot: Bot = None
) -> int | None:
    # Busca usu√°rio (async)
    usuario = await obter_usuario_db(user_id)
    if not usuario:
        return None

    # Calcula novos pontos e n√≠vel
    novos = usuario['pontos'] + delta
    ja_pontuador = usuario['is_pontuador']
    nivel = usuario['nivel_atingido']

    # Registra hist√≥rico (async)
    await registrar_historico_db(user_id, delta, motivo)

    # Verifica se virou pontuador
    becomes_pontuador = False
    if not ja_pontuador and novos >= LIMIAR_PONTUADOR:
        ja_pontuador = True
        nivel += 1
        becomes_pontuador = True

    # Verifica brinde por n√≠vel
    brinde = None
    for limiar, nome in NIVEIS_BRINDES.items():
        if usuario['pontos'] < limiar <= novos:
            brinde = nome
            nivel += 1
            break

    async def atualizar_pontos(
            user_id: int,
            delta: int,
            motivo: str | None = None,
            bot: Bot | None = None
    ) -> int | None:
        # Busca usu√°rio (async)
        usuario = await obter_usuario_db(user_id)
        if not usuario:
            return None

        # Calcula novos pontos e n√≠vel
        novos = usuario['pontos'] + delta
        ja_pontuador = usuario['is_pontuador']
        nivel = usuario['nivel_atingido']

        # Registra hist√≥rico (async)
        await registrar_historico_db(user_id, delta, motivo)

        # Verifica se virou pontuador
        becomes_pontuador = False
        if not ja_pontuador and novos >= LIMIAR_PONTUADOR:
            ja_pontuador = True
            nivel += 1
            becomes_pontuador = True

        # Verifica brinde por n√≠vel
        brinde = None
        for limiar, nome in NIVEIS_BRINDES.items():
            if usuario['pontos'] < limiar <= novos:
                brinde = nome
                nivel += 1
                break

        # Atualiza dados do usu√°rio no banco (asyncpg)
        await pool.execute(
            """
            UPDATE usuarios
               SET pontos = $1,
                   is_pontuador = $2,
                   nivel_atingido = $3
             WHERE user_id = $4
            """,
            novos, ja_pontuador, nivel, user_id
        )

        # Envia notifica√ß√µes ao admin, se houver bot
        if bot:
            texto_base = f"üîî Usu√°rio `{user_id}` atingiu {novos} pontos"
            if becomes_pontuador:
                texto = texto_base + " e virou *PONTUADOR*." + (f" Motivo: {motivo}" if motivo else "")
                asyncio.create_task(
                    bot.send_message(chat_id=ID_ADMIN, text=texto, parse_mode='Markdown')
                )
            if brinde:
                texto = texto_base + f" e ganhou *{brinde}*." + (f" Motivo: {motivo}" if motivo else "")
                asyncio.create_task(
                    bot.send_message(chat_id=ID_ADMIN, text=texto, parse_mode='Markdown')
                )

        return novos


def escape_markdown_v2(text: str) -> str:
    """
    Escapa caracteres reservados do MarkdownV2.
    """
    escape_chars = r'_*[]()~`>#+-=|{}.!'
    return re.sub(f'([{re.escape(escape_chars)}])', r'\\\1', text)

# Mensagem de Mural de Entrada
async def setup_bot_description(app):
    try:
        await app.bot.set_my_short_description(
            short_description="ü§ñ Ol√°! Sou um bot do @cupomnavitrine ‚Äì Gerenciador de pontua√ß√£o.",
            language_code="pt"
        )
        await app.bot.set_my_description(
            description="ü§ñ Se inscreva em nosso canal @cupomnavitrine ‚Äì",
            language_code="pt"
        )
        logger.info("Descri√ß√µes do bot definidas com sucesso.")
    except Exception:
        logger.exception("Erro ao definir descri√ß√µes do bot")


async def setup_commands(app):
    try:
        comandos_basicos = [
            BotCommand("meus_pontos", "Ver sua pontua√ß√£o e n√≠vel"),
            BotCommand("ranking_top10", "Top 10 de usu√°rios por pontos"),
            BotCommand("ranking_top10q", "Top 10 dos ultimos 15 dias"),
            BotCommand("historico", "Mostrar seu hist√≥rico de pontos"),
            BotCommand("como_ganhar", "Como ganhar mais pontos"),
        ]

        # 1) Comandos padr√£o (p√∫blico)
        await app.bot.set_my_commands(
            comandos_basicos,
            scope=BotCommandScopeDefault()
        )

        # 2) Comandos em chat privado (com suporte)
        comandos_privados = comandos_basicos + [
            BotCommand("suporte", "Enviar mensagem ao suporte"),
            BotCommand("cancelar", "Cancelar mensagem ao suporte"),
        ]

        await app.bot.set_my_commands(
            comandos_privados,
            scope=BotCommandScopeAllPrivateChats()
        )

        logger.info("Comandos configurados para p√∫blico e privado.")
    except Exception:
        logger.exception("Erro ao configurar comandos")


ADMIN_MENU = (
    "üîß *Menu Admin* üîß\n\n"
    "/add_pontos ‚Äì Atribuir pontos a um usu√°rio\n"
    "/del_pontos ‚Äì remover pontos de um usu√°rio\n"
    "/add_admin ‚Äì adicionar novo admin\n"
    "/rem_admin ‚Äì remover admin\n"
    "/rem_pontuador ‚Äì Remover permiss√£o de pontuador\n"
    "/bloquear ‚Äì Bloquear usu√°rio\n"
    "/desbloquear ‚Äì Desbloquear usu√°rio\n"
    "/historico_usuario ‚Äì historico de nomes do usu√°rio\n"
    "/listar_usuarios ‚Äì lista de usuarios cadastrados\n"
    "/total_usuarios ‚Äì quantidade total de usuarios cadastrados\n"
    "/adapproibida ‚Äì Adicionar palavra proibida\n"
    "/delproibida ‚Äì Remover palavra proibida\n"
    "/listaproibida ‚Äì Listar palavras proibidas\n"
)


async def admin(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if user_id in ADMINS:
        context.user_data["is_admin"] = True
        await update.message.reply_text(ADMIN_MENU)
        return ConversationHandler.END

    await update.message.reply_text("üîí Digite a senha de admin:")
    return ADMIN_SENHA

async def tratar_senha(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.text.strip() == str(ADMIN_PASSWORD):
        context.user_data["is_admin"] = True
        await update.message.reply_text(ADMIN_MENU)
    else:
        await update.message.reply_text("‚ùå Senha incorreta. Acesso negado.")
    return ConversationHandler.END

# --- Helpers de bloqueio com asyncpg ---

async def bloquear_user_bd(user_id: int, motivo: str = None):
    await pool.execute(
        """
        INSERT INTO usuarios_bloqueados (user_id, motivo)
        VALUES ($1, $2)
        ON CONFLICT (user_id)
        DO UPDATE SET motivo = EXCLUDED.motivo, data = CURRENT_TIMESTAMP
        """,
        user_id, motivo
    )

async def desbloquear_user_bd(user_id: int):
    await pool.execute(
        "DELETE FROM usuarios_bloqueados WHERE user_id = $1",
        user_id
    )

async def obter_bloqueado(user_id: int):
    return await pool.fetchrow(
        "SELECT motivo FROM usuarios_bloqueados WHERE user_id = $1",
        user_id
    )


# --- Helpers de palavras proibidas (asyncpg) ---
async def add_palavra_proibida_bd(palavra: str) -> bool:
    """
    Tenta inserir uma palavra proibida; retorna True se inseriu, False se j√° existia.
    """
    # Usamos RETURNING para saber se houve inser√ß√£o
    row = await pool.fetchrow(
        """
        INSERT INTO palavras_proibidas (palavra)
        VALUES ($1)
        ON CONFLICT DO NOTHING
        RETURNING id
        """,
        palavra.lower()
    )
    return bool(row)


async def del_palavra_proibida_bd(palavra: str) -> bool:
    """
    Remove uma palavra proibida; retorna True se removeu, False se n√£o encontrou.
    """
    # RETURNING nos d√° feedback imediato
    row = await pool.fetchrow(
        """
        DELETE FROM palavras_proibidas
        WHERE palavra = $1
        RETURNING id
        """,
        palavra.lower()
    )
    return bool(row)


async def listar_palavras_proibidas_db() -> list[str]:
    """
    Retorna a lista de todas as palavras proibidas.
    """
    rows = await pool.fetch("SELECT palavra FROM palavras_proibidas")
    return [r["palavra"] for r in rows]


# --- Middleware de verifica√ß√£o de bloqueio ---
async def checar_bloqueio(update: Update, context: CallbackContext):
    user_id = update.effective_user.id
    reg = await obter_bloqueado(user_id)   # agora await
    if reg:
        motivo = reg['motivo'] or 'sem motivo especificado'
        await update.message.reply_text(f"‚õî Voc√™ est√° bloqueado. Motivo: {motivo}")
        raise ApplicationHandlerStop()


# --- Handlers de bloqueio ---
async def bloquear_usuario(update: Update, context: CallbackContext):
    if update.effective_user.id != ID_ADMIN:
        return await update.message.reply_text("üîí Apenas admin pode usar.")
    try:
        alvo = int(context.args[0])
    except:
        return await update.message.reply_text("Uso: /bloquear <user_id> [motivo]")
    motivo = ' '.join(context.args[1:]) or None
    await bloquear_user_bd(alvo, motivo)   # await aqui
    await update.message.reply_text(f"‚úÖ Usu√°rio {alvo} bloqueado. Motivo: {motivo or 'nenhum'}")


async def desbloquear_usuario(update: Update, context: CallbackContext):
    if update.effective_user.id != ID_ADMIN:
        return await update.message.reply_text("üîí Apenas admin pode usar.")
    try:
        alvo = int(context.args[0])
    except:
        return await update.message.reply_text("Uso: /desbloquear <user_id>")
    await desbloquear_user_bd(alvo)          # await aqui
    await update.message.reply_text(f"‚úÖ Usu√°rio {alvo} desbloqueado.")


# --- Handlers de palavras proibidas ---

async def add_palavra_proibida(update: Update, context: CallbackContext):
    if update.effective_user.id != ID_ADMIN:
        return await update.message.reply_text("üîí Apenas admin pode usar.")
    if not context.args:
        return await update.message.reply_text("Uso: /adapproibida <palavra>")
    palavra = context.args[0].lower()
    if await add_palavra_proibida_bd(palavra):  # await aqui
        await update.message.reply_text(f"‚úÖ Palavra '{palavra}' adicionada √† lista proibida.")
    else:
        await update.message.reply_text(f"‚ö†Ô∏è Palavra '{palavra}' j√° est√° na lista.")


async def del_palavra_proibida(update: Update, context: CallbackContext):
    if update.effective_user.id != ID_ADMIN:
        return await update.message.reply_text("üîí Apenas admin pode usar.")
    if not context.args:
        return await update.message.reply_text("Uso: /delproibida <palavra>")
    palavra = context.args[0].lower()
    if await del_palavra_proibida_bd(palavra):  # await aqui
        await update.message.reply_text(f"üóëÔ∏è Palavra '{palavra}' removida da lista.")
    else:
        await update.message.reply_text(f"‚ö†Ô∏è Palavra '{palavra}' n√£o encontrada.")


async def listar_palavras_proibidas(update: Update, context: CallbackContext):
    if update.effective_user.id != ID_ADMIN:
        return await update.message.reply_text("üîí Apenas admin pode usar.")
    palavras = await listar_palavras_proibidas_db()  # await aqui
    text = "Nenhuma" if not palavras else ", ".join(palavras)
    await update.message.reply_text(f"üîí Palavras proibidas: {text}")


# --- Handler de suporte ---

async def suporte(update: Update, context: CallbackContext):
    await update.message.reply_text("üìù Escreva sua mensagem de suporte (m√°x. 500 caracteres). Use /cancelar para abortar.")
    return ESPERANDO_SUPORTE


async def receber_suporte(update: Update, context: CallbackContext):
    texto = update.message.text.strip()
    if len(texto) > 500:
        await update.message.reply_text("‚ùå Sua mensagem ultrapassa 500 caracteres. Tente novamente.")
        return ESPERANDO_SUPORTE

    palavras = await listar_palavras_proibidas_db()  # await aqui
    for palavra in palavras:
        if palavra in texto.lower():
            await update.message.reply_text(
                "üö´ Sua mensagem cont√©m uma palavra proibida. Revise e tente novamente."
            )
            return ESPERANDO_SUPORTE

    user = update.effective_user
    await context.bot.send_message(  # await aqui
        chat_id=ID_ADMIN,
        text=f"üì© Suporte de {user.username or user.id}: {texto}",
        parse_mode='Markdown'
    )
    await update.message.reply_text("‚úÖ Sua mensagem foi enviada. Obrigado!")
    return ConversationHandler.END


async def cancelar_suporte(update: Update, context: CallbackContext):
    await update.message.reply_text("‚ùå Suporte cancelado.")
    return ConversationHandler.END


# Handler para /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user

    # dispara em background ou await, como preferir
    asyncio.create_task(
        adicionar_usuario_db(
            pool,
            user.id,
            user.username or "",
            user.first_name or ""
        )
    )

    await update.message.reply_text(
        "ü§ñ Ol√°! Bem-vindo ao Bot de Pontua√ß√£o da @cupomnavitrine.\n\n"
        "Para come√ßar abra o menu lateral ou digite um comando."
    )

async def meus_pontos(update: Update, context: CallbackContext):
    """
    Exibe ao usu√°rio seus pontos e n√≠vel atual,
    tratando poss√≠veis falhas de conex√£o ao banco.
    """
    user = update.effective_user

    try:
        # Tenta inserir ou atualizar o usu√°rio
        await adicionar_usuario_db(user.id, user.username)
        # Tenta buscar os dados de pontos e n√≠vel
        u = await obter_usuario_db(user.id)

    except Exception as e:
        # Aqui voc√™ pode usar logger.error(e) para registrar a stack
        await update.message.reply_text(
            "‚ùå Desculpe, tivemos um problema ao acessar as suas informa√ß√µes. Tente novamente mais tarde. se o problema persistir contate o suporte."
        )
        return

    # Se tudo ocorreu bem, respondemos normalmente
    await update.message.reply_text(
        f"üéâ Voc√™ tem {u['pontos']} pontos (N√≠vel {u['nivel_atingido']})."
    )


async def como_ganhar(update: Update, context: CallbackContext):
    await update.message.reply_text(
        "üéØ Voc√™ Pode Ganha Pontos Por:\n\n"
        "‚Ä¢ Compras por ID em videos.\n"
        "‚Ä¢ At√© 1 coment√°rio diario em grupos\n"
        "‚Ä¢ Indicar links de lives com moedas\n"
        "‚Ä¢ Receber pontua√ß√µes de outros usu√°rios por ajuda\n"
        "‚Ä¢ Receber pontua√ß√µes por convites ‚ìò\n"
        "‚Ä¢ Mais em Breve. \n\n"
        "Use /meus_pontos para ver seu total!"
    )


async def add_pontos(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
        Inicia o fluxo de atribui√ß√£o de pontos.
        Verifica se o usu√°rio possui permiss√£o tempor√°ria (senha v√°lida) e
        pergunta qual √© o user_id que receber√° pontos.
        """
    # Verifica permiss√£o tempor√°ria
    if not context.user_data.get("is_admin"):
        return await update.message.reply_text("üîí Voc√™ precisa autenticar como admin primeiro.")
    # Inicia a conversa
    await update.message.reply_text("üìã Atribuir pontos: primeiro, qual √© o user_id?")
    return ADD_PONTOS_POR_ID

async def add_pontos_IDuser(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
        Recebe o ID do usu√°rio destinat√°rio.
        Valida se √© um n√∫mero inteiro. Se v√°lido, armazena em user_data
        e pergunta a quantidade de pontos.
        """
    text = update.message.text.strip()
    if not text.isdigit():
        return await update.message.reply_text("‚ùóÔ∏è ID inv√°lido. Digite somente n√∫meros para o user_id.")
    context.user_data["add_pt_id"] = int(text)
    await update.message.reply_text("‚úèÔ∏è Quantos pontos voc√™ quer dar?")
    return ADD_PONTOS_POR_ID

async def add_pontos_quantidade(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
        Recebe a quantidade de pontos a ser atribu√≠da.
        Valida se √© n√∫mero inteiro. Se v√°lido, armazena em user_data
        e pergunta o motivo da atribui√ß√£o.
        """
    text = update.message.text.strip()
    if not text.isdigit():
        return await update.message.reply_text("‚ùóÔ∏è Valor inv√°lido. Digite somente n√∫meros para os pontos.")
    context.user_data["add_pt_value"] = int(text)
    await update.message.reply_text("üìù Por fim, qual o motivo para registrar no hist√≥rico?")
    return ADD_PONTOS_POR_ID

async def add_pontos_motivo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
        Recebe o motivo da atribui√ß√£o de pontos.
        Valida se n√£o est√° vazio. Se v√°lido, recupera todos os dados de user_data,
        verifica a exist√™ncia do usu√°rio, faz a atualiza√ß√£o cumulativa no banco
        e envia a confirma√ß√£o. Encerra a conversa.
        """
    motivo = update.message.text.strip()
    if not motivo:
        return await update.message.reply_text("‚ùóÔ∏è Motivo n√£o pode ficar em branco. Digite um texto.")
    context.user_data["add_pt_reason"] = motivo

    # Todos os dados coletados, processa a atualiza√ß√£o
    alvo_id = context.user_data.pop("add_pt_id")
    pontos  = context.user_data.pop("add_pt_valOR")
    motivo  = context.user_data.pop("add_pt_motivo")

    usuario = await obter_usuario_db(alvo_id)
    if not usuario:
        return await update.message.reply_text("‚ùå Usu√°rio n√£o encontrado. Cancelando opera√ß√£o.")

    novo_total = await atualizar_pontos(alvo_id, pontos, motivo, context.bot)
    await update.message.reply_text(
        f"‚úÖ {pontos}‚ÄØpts atribu√≠dos a {alvo_id}.\n"
        f"Motivo: {motivo}\n"
        f"Total agora: {novo_total}‚ÄØpts."
    )
    return ConversationHandler.END

async def add_pontos_cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
      Handler de fallback para cancelar o fluxo de atribui√ß√£o de pontos.
      Envia mensagem de cancelamento e encerra a conversa.
      """
    await update.message.reply_text("‚ùå Opera√ß√£o cancelada.")
    return ConversationHandler.END



async def adicionar_pontuador(update: Update, context: CallbackContext):
    chamador = update.effective_user.id
    reg = await obter_usuario_db(chamador)
    if chamador != ID_ADMIN and not reg['is_pontuador']:
        return await update.message.reply_text("üîí Sem permiss√£o.")

    if not context.args:
        return await update.message.reply_text("Uso: /add_pontuador <user_id>")
    try:
        novo = int(context.args[0])
    except ValueError:
        return await update.message.reply_text("Uso: /add_pontuador <user_id>")

    await adicionar_usuario_db(novo, None)
    await pool.execute(
        "UPDATE usuarios SET is_pontuador = TRUE WHERE user_id = $1",
        novo
    )
    await update.message.reply_text(f"‚úÖ Usu√°rio {novo} virou pontuador.")


async def historico(update: Update, context: CallbackContext):
    user = update.effective_user
    rows = await pool.fetch(
        """
        SELECT data, pontos, motivo
          FROM historico_pontos
         WHERE user_id = $1
      ORDER BY data DESC
         LIMIT 25
        """,
        user.id
    )
    if not rows:
        await update.message.reply_text("üóíÔ∏è Nenhum registro de hist√≥rico encontrado.")
        return
    lines = [
        f"{r['data'].strftime('%d/%m %H:%M')}: {r['pontos']} pts - {r['motivo']}"
        for r in rows
    ]
    await update.message.reply_text("üóíÔ∏è Seu hist√≥rico:\n" + "\n".join(lines))


async def ranking_top10(update: Update, context: CallbackContext):
    top = await pool.fetch(
        "SELECT username, pontos FROM usuarios ORDER BY pontos DESC LIMIT 10"
    )
    if not top:
        await update.message.reply_text("üèÖ Nenhum usu√°rio cadastrado.")
        return
    text = "üèÖ Top 10 de pontos:\n" + "\n".join(
        f"{i + 1}. {(u['username'] or 'Usu√°rio')} ‚Äì {u['pontos']} pts"
        for i, u in enumerate(top)
    )
    await update.message.reply_text(text)


async def zerar_pontos(update: Update, context: CallbackContext):
    if update.effective_user.id != ID_ADMIN:
        return await update.message.reply_text("üîí Apenas admin pode usar.")
    try:
        alvo = int(context.args[0])
    except (IndexError, ValueError):
        return await update.message.reply_text("Uso: /zerar_pontos <user_id>")

    await pool.execute(
        "UPDATE usuarios SET pontos = 0 WHERE user_id = $1",
        alvo
    )
    await update.message.reply_text(f"‚úÖ Pontos de {alvo} zerados.")


async def pontuador(update: Update, context: CallbackContext):
    if update.effective_user.id != ID_ADMIN:
        return await update.message.reply_text("üîí Apenas admin pode usar.")
    try:
        alvo = int(context.args[0])
    except (IndexError, ValueError):
        return await update.message.reply_text("Uso: /remover_pontuador <user_id>")

    await pool.execute(
        "UPDATE usuarios SET is_pontuador = FALSE WHERE user_id = $1",
        alvo
    )
    await update.message.reply_text(f"‚úÖ {alvo} n√£o √© mais pontuador.")


async def tratar_presenca(update: Update, context: CallbackContext):
    user = update.effective_user
    # garante exist√™ncia e recupera dados
    await adicionar_usuario_db(user.id, user.username)
    reg = await obter_usuario_db(user.id)

    if not reg['visto']:
        # pontua presen√ßa
        await atualizar_pontos(user.id, 1, 'Presen√ßa inicial', context.bot)
        # marca visto = TRUE
        await pool.execute(
            "UPDATE usuarios SET visto = TRUE WHERE user_id = $1",
            user.id
        )
        await update.message.reply_text("üëã +1 ponto por participar!")

async def cancelar(update: Update, conText: ContextTypes.DEFAULT_TYPE):
    # Limpa tudo que j√° havia sido armazenado
    conText.user_data.clear()
    await update.message.reply_text(
        "‚ùå Opera√ß√£o cancelada. Nenhum dado foi salvo."
    )
    return ConversationHandler.END

PAGE_SIZE = 20
MAX_MESSAGE_LENGTH = 4000

async def historico_usuario(update: Update, context: CallbackContext):
    """
    /historico_usuario <user_id> [page]
    Exibe mudan√ßas de username/first_name de um usu√°rio paginadas.
    Somente admins podem executar.
    """
    AJUDA_HISTORICO = (
        "*üìò Ajuda: /historico_usuario*\n\n"
        "Este comando permite visualizar o hist√≥rico de altera√ß√µes de *nome* ou *username* de um usu√°rio.\n\n"
        "*Uso b√°sico:*\n"
        "`/historico_usuario <user_id>` ‚Äì Mostra a 1¬™ p√°gina do hist√≥rico do usu√°rio informado.\n\n"
        "*Uso com pagina√ß√£o:*\n"
        "`/historico_usuario <user_id> <p√°gina>` ‚Äì Mostra a p√°gina desejada do hist√≥rico.\n\n"
        "*Exemplos:*\n"
        "`/historico_usuario 123456789` ‚Äì Exibe as altera√ß√µes recentes do usu√°rio com ID 123456789.\n"
        "`/historico_usuario 123456789 2` ‚Äì Exibe a 2¬™ p√°gina do hist√≥rico.\n\n"
        "*‚ÑπÔ∏è Observa√ß√µes:*\n"
        "‚Ä¢ Apenas administradores t√™m permiss√£o para executar este comando.\n"
        f"‚Ä¢ Cada p√°gina exibe at√© *{PAGE_SIZE}* registros.\n"
        "‚Ä¢ As altera√ß√µes s√£o registradas automaticamente sempre que um nome ou username muda.\n"
    )
    # 1) Permiss√£o
    requester_id = update.effective_user.id
    if requester_id not in ADMIN_IDS:
        await update.message.reply_text("‚ùå Voc√™ n√£o tem permiss√£o para isso.")
        return

    # Verifica√ß√£o de argumentos
    args = context.args or []
    if len(args) not in (1, 2) or not args[0].isdigit():
        await update.message.reply_text(AJUDA_HISTORICO, parse_mode="MarkdownV2")
        return

    # 2) Valida√ß√£o de args e pagina√ß√£o
    args = context.args or []
    if len(args) not in (1, 2) or not args[0].isdigit():
        await update.message.reply_text("Use: /historico_usuario <user_id> [page]")
        return

    target_id = int(args[0])
    page = int(args[1]) if len(args) == 2 and args[1].isdigit() and int(args[1]) > 0 else 1
    offset = (page - 1) * PAGE_SIZE

    # 3) Fetch com tratamento de erros e timeout
    try:
        rows = await pool.fetch(
            """
            SELECT campo, valor_antigo, valor_novo, changed_at
              FROM usuario_history
             WHERE user_id = $1
          ORDER BY changed_at DESC
             LIMIT $2 OFFSET $3
            """,
            target_id, PAGE_SIZE, offset
        )
    except (asyncpg.CannotConnectNowError,
            asyncpg.ConnectionDoesNotExistError,
            asyncpg.PostgresError) as db_err:
        logger.error("Erro ao buscar hist√≥rico de %s (page %d): %s", target_id, page, db_err)
        await update.message.reply_text(
            "‚ùå N√£o foi poss√≠vel acessar o hist√≥rico no momento. Tente novamente mais tarde."
        )
        return
    except Exception:
        logger.exception("Erro inesperado ao buscar hist√≥rico de %s (page %d)", target_id, page)
        await update.message.reply_text(
            "‚ùå Ocorreu um erro inesperado. Tente novamente mais tarde."
        )
        return

    # 4) Sem registros
    if not rows:
        await update.message.reply_text(
            f"‚ÑπÔ∏è Sem hist√≥rico de altera√ß√µes para o user_id `{target_id}` na p√°gina {page}."
        )
        return

    # 5) Monta texto
    header = f"üïí Hist√≥rico de altera√ß√µes para `{target_id}` (p√°gina {page}, {PAGE_SIZE} por p√°gina):"
    lines = [header]
    for r in rows:
        ts = r["changed_at"].strftime("%d/%m/%Y %H:%M")
        campo = escape_markdown_v2(r["campo"])
        antigo = escape_markdown_v2(r["antigo"])
        novo = escape_markdown_v2(r["novo"])

        lines.append(f"{ts} ‚Äî *{campo}*: `{antigo}` ‚Üí `{novo}`")

    texto = "\n".join(lines)

    # 6) Divide em blocos se muito longo
    if len(texto) > MAX_MESSAGE_LENGTH:
        chunks = []
        current = []
        size = 0
        for line in lines:
            size += len(line) + 1
            if size > MAX_MESSAGE_LENGTH:
                chunks.append("\n".join(current))
                current = [line]
                size = len(line) + 1
            else:
                current.append(line)
        if current:
            chunks.append("\n".join(current))

        for chunk in chunks:
            await update.message.reply_text(chunk, parse_mode="MarkdownV2")
    else:
        await update.message.reply_text(texto, parse_mode="MarkdownV2")

    # 7) Log de acesso para auditoria
    logger.info("Admin %s consultou hist√≥rico do user %s (page %d)", requester_id, target_id, page)

async def listar_usuarios(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    /listar_usuarios [page | nome <prefixo> | id <prefixo>]
    Mostra lista de usu√°rios com pagina√ß√£o e filtros opcionais.
    - page: n√∫mero da p√°gina (padr√£o 1)
    - nome <prefixo>: filtra names come√ßando com prefixo
    - id <prefixo>: filtra IDs come√ßando com prefixo
    Somente ADMINS podem executar.
    """
    user_id = update.effective_user.id
    if user_id not in ADMINS:
        return await update.message.reply_text("‚ùå Voc√™ n√£o tem permiss√£o para isso.")

    args = context.args or []
    page = 1
    filtro_sql = ""
    filtro_args = []

    # Interpretar subcomandos de filtro
    if args:
        if args[0].isdigit():
            page = max(1, int(args[0]))
        elif args[0].lower() == 'nome' and len(args) > 1:
            prefix = args[1]
            filtro_sql = "WHERE first_name ILIKE $1"
            filtro_args = [f"{prefix}%"]
        elif args[0].lower() == 'id' and len(args) > 1:
            prefix = args[1]
            filtro_sql = "WHERE CAST(user_id AS TEXT) LIKE $1"
            filtro_args = [f"{prefix}%"]

    try:
        # Conta total de registros para pagina√ß√£o
        total = await asyncio.wait_for(
            pool.fetchval(f"SELECT COUNT(*) FROM usuarios {filtro_sql}", *filtro_args),
            timeout=TEMPO_LIMITE_BUSCA
        )
    except Exception as e:
        logger.error("Erro ao contar usu√°rios: %s", e)
        return await update.message.reply_text("‚ùå Erro ao acessar o banco.")

    total_pages = max(1, math.ceil(total / PAGE_SIZE))
    if page > total_pages:
        return await update.message.reply_text(
            f"‚ÑπÔ∏è P√°gina {page} n√£o existe. S√≥ at√© {total_pages}."
        )

    offset = (page - 1) * PAGE_SIZE
    query = (
        f"SELECT user_id, first_name FROM usuarios {filtro_sql} "
        f"ORDER BY user_id LIMIT $1 OFFSET $2"
    )

    try:
        rows = await asyncio.wait_for(
            pool.fetch(query, *(filtro_args + [PAGE_SIZE, offset])),
            timeout=TEMPO_LIMITE_BUSCA
        )
    except asyncio.TimeoutError:
        return await update.message.reply_text(
            "‚ùå A consulta demorou demais. Tente novamente mais tarde."
        )
    except Exception as e:
        logger.error("Erro ao listar usu√°rios: %s", e)
        return await update.message.reply_text(
            "‚ùå Erro ao acessar o banco. Tente novamente mais tarde."
        )

    if not rows:
        return await update.message.reply_text("‚ÑπÔ∏è Nenhum usu√°rio encontrado.")

    # Monta mensagem e bot√µes de navega√ß√£o
    header = f"üóíÔ∏è Usu√°rios (p√°gina {page}/{total_pages}, total {total}):"
    lines = [header]
    for r in rows:
        nome = r['first_name'] or '<sem nome>'
        lines.append(f"‚Ä¢ `{r['user_id']}` ‚Äî {nome}")
    text = "\n".join(lines)

    # Inline keyboard para navegar p√°ginas
    buttons = []
    if page > 1:
        buttons.append(InlineKeyboardButton('‚óÄÔ∏è Anterior', callback_data=f"usuarios|{page-1}|{' '.join(args)}"))
    if page < total_pages:
        buttons.append(InlineKeyboardButton('Pr√≥xima ‚ñ∂Ô∏è', callback_data=f"usuarios|{page+1}|{' '.join(args)}"))
    keyboard = InlineKeyboardMarkup([buttons]) if buttons else None

    await update.message.reply_text(text, parse_mode='MarkdownV2', reply_markup=keyboard)


async def callback_listar_usuarios(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    Callback para navega√ß√£o da listagem de usu√°rios.
    """
    query = update.callback_query
    await query.answer()
    data = query.data.split('|')
    _, page_str, args_str = data
    # Reconstr√≥i contexto e chama listar_usuarios
    context.args = args_str.split() if args_str else []
    # Simula update.message para reaproveitar a fun√ß√£o
    return await listar_usuarios(query, context)


async def exportar_usuarios(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    /exportar_usuarios
    Exporta todos os usu√°rios em arquivo CSV.
    Somente ADMINS podem executar.
    """
    user_id = update.effective_user.id
    if user_id not in ADMINS:
        return await update.message.reply_text("‚ùå Voc√™ n√£o tem permiss√£o para isso.")

    try:
        rows = await asyncio.wait_for(
            pool.fetch("SELECT user_id, first_name FROM usuarios ORDER BY user_id"),
            timeout=TEMPO_LIMITE_BUSCA
        )
    except Exception as e:
        logger.error("Erro ao exportar usu√°rios: %s", e)
        return await update.message.reply_text("‚ùå Erro ao acessar o banco.")

    if not rows:
        return await update.message.reply_text("‚ÑπÔ∏è Nenhum usu√°rio para exportar.")

    # Cria CSV em mem√≥ria
    buffer = io.StringIO()
    writer = csv.writer(buffer)
    writer.writerow(['user_id', 'first_name'])
    for r in rows:
        writer.writerow([r['user_id'], r['first_name'] or ''])
    buffer.seek(0)

    # Envia como arquivo
    file = InputFile(buffer, filename='usuarios.csv')
    await update.message.reply_document(document=file, filename='usuarios.csv')


async def on_startup(app):
    # ser√° executado no mesmo loop do Application
    await init_db_pool()
    logger.info("‚úÖ Pool asyncpg inicializado e tabelas garantidas.")


main_conv = ConversationHandler(
    entry_points=[
        CommandHandler("admin", admin),
        CommandHandler("add_pontos", add_pontos),
        # CommandHandler("del_pontos", del_pontos),
        # CommandHandler("add_admin", add_admin),
        # CommandHandler("rem_admin", rem_admin),
        # CommandHandler("rem_pontuador", rem_pontuador),
        CommandHandler("historico_usuario", historico_usuario),
        # CommandHandler("listar_usuarios", listar_usuarios),
        # CommandHandler("total_usuarios", total_usuarios),
        # CommandHandler("bloquear", bloquear),
        # CommandHandler("desbloquear", desbloquear),
        CommandHandler("add_palavra_proibida", add_palavra_proibida),
        CommandHandler("del_palavra_proibida", del_palavra_proibida),
        # CommandHandler("listaproibida", listaproibida)
    ],
    states={
        # SENHA ADMIN (exemplo de valida√ß√£o inicial)
        ADMIN_SENHA: [
            MessageHandler(filters.TEXT & ~filters.COMMAND, tratar_senha),
            MessageHandler(filters.Regex(r'^(cancelar|/cancelar)$'), cancelar),
        ],

        # # SUPORTE (caso voc√™ use suporte)
        # ESPERANDO_SUPORTE: [
        #     MessageHandler(filters.TEXT & ~filters.COMMAND, tratar_mensagem_suporte),
        #     MessageHandler(filters.Regex(r'^(cancelar|/cancelar)$'), cancelar),
        # ],
        #
        # # /add_pontos
        # ADD_PONTOS_POR_ID: [
        #     MessageHandler(filters.TEXT & ~filters.COMMAND, receber_id_add_pontos),
        #     MessageHandler(filters.Regex(r'^(cancelar|/cancelar)$'), cancelar),
        # ],
        # ADD_PONTOS_QTD: [
        #     MessageHandler(filters.TEXT & ~filters.COMMAND, receber_qtd_add_pontos),
        #     MessageHandler(filters.Regex(r'^(cancelar|/cancelar)$'), cancelar),
        # ],
        # ADD_PONTOS_MOTIVO: [
        #     MessageHandler(filters.TEXT & ~filters.COMMAND, receber_motivo_add_pontos),
        #     MessageHandler(filters.Regex(r'^(cancelar|/cancelar)$'), cancelar),
        # ],
        #
        # # /del_pontos
        # DEL_PONTOS_ID: [
        #     MessageHandler(filters.TEXT & ~filters.COMMAND, receber_id_del_pontos),
        #     MessageHandler(filters.Regex(r'^(cancelar|/cancelar)$'), cancelar),
        # ],
        # DEL_PONTOS_QTD: [
        #     MessageHandler(filters.TEXT & ~filters.COMMAND, receber_qtd_del_pontos),
        #     MessageHandler(filters.Regex(r'^(cancelar|/cancelar)$'), cancelar),
        # ],
        # DEL_PONTOS_MOTIVO: [
        #     MessageHandler(filters.TEXT & ~filters.COMMAND, receber_motivo_del_pontos),
        #     MessageHandler(filters.Regex(r'^(cancelar|/cancelar)$'), cancelar),
        # ],
        #
        # # /remover_pontuador
        # REMOVER_PONTUADOR_ID: [
        #     MessageHandler(filters.TEXT & ~filters.COMMAND, receber_id_remover_pontuador),
        #     MessageHandler(filters.Regex(r'^(cancelar|/cancelar)$'), cancelar),
        # ],
        #
        # # /bloquear
        # BLOQUEAR_ID: [
        #     MessageHandler(filters.TEXT & ~filters.COMMAND, receber_id_bloquear),
        #     MessageHandler(filters.Regex(r'^(cancelar|/cancelar)$'), cancelar),
        # ],
        #
        # # /desbloquear
        # DESBLOQUEAR_ID: [
        #     MessageHandler(filters.TEXT & ~filters.COMMAND, receber_id_desbloquear),
        #     MessageHandler(filters.Regex(r'^(cancelar|/cancelar)$'), cancelar),
        # ],
        #
        # # /add_palavra_proibida
        # ADD_PALAVRA_PROIBIDA: [
        #     MessageHandler(filters.TEXT & ~filters.COMMAND, receber_palavras_proibidas_add),
        #     MessageHandler(filters.Regex(r'^(cancelar|/cancelar)$'), cancelar),
        # ],
        #
        # # /del_palavra_proibida
        # DEL_PALAVRA_PROIBIDA: [
        #     MessageHandler(filters.TEXT & ~filters.COMMAND, receber_palavras_proibidas_del),
        #     MessageHandler(filters.Regex(r'^(cancelar|/cancelar)$'), cancelar),
        # ],
    },
    fallbacks=[CommandHandler("cancelar", cancelar)],
        allow_reentry=True,
)

# --- Inicializa√ß√£o do bot ---
if __name__ == '__main__':
    import asyncio

    # 1) inicializa o pool ANTES de criar o Application
    asyncio.get_event_loop().run_until_complete(init_db_pool())
    logging.info("‚úÖ Pool asyncpg inicializado e tabelas garantidas.")

    # 2) agora monte o bot
    app = (
        ApplicationBuilder()
        .token(BOT_TOKEN)
        .post_init(setup_bot_description)
        .post_init(setup_commands)
        .build()
    )
    app.add_handler(main_conv)

    app.add_handler(CommandHandler('start', start, filters=filters.ChatType.PRIVATE))
    app.add_handler(CommandHandler('admin', admin, filters=filters.ChatType.PRIVATE))
    app.add_handler(CommandHandler('meus_pontos', meus_pontos))
    app.add_handler(CommandHandler('como_ganhar', como_ganhar))
    app.add_handler(CommandHandler('historico', historico))
    app.add_handler(CommandHandler('ranking_top10', ranking_top10))
    #app.add_handler(CommandHandler('ranking_top10q', ranking_top10q))

    # Presen√ßa em grupos
    app.add_handler(MessageHandler(filters.ChatType.GROUPS, tratar_presenca))

    logger.info("üîÑ Iniciando polling...")
    try:
        app.run_polling()
    except Exception:
        logger.exception("‚ùå Erro durante run_polling")